# modify from: https://raw.githubusercontent.com/micro/micro/master/scripts/install.ps1
$ErrorActionPreference = 'stop'

# GitHub Org and Repo to get archives from
$GitHubOrg="axetroy"
$GitHubRepo="dvm"
$githubHeader = @{}

$DvmInstallDir="c:\dvm"
$MicroCliName = "dvm.exe"
$MicroCliPath = "${DvmInstallDir}\${MicroCliName}"

if((Get-ExecutionPolicy) -gt 'RemoteSigned' -or (Get-ExecutionPolicy) -eq 'ByPass') {
    Write-Output "PowerShell requires an execution policy of 'RemoteSigned'."
    Write-Output "To make this change please run:"
    Write-Output "'Set-ExecutionPolicy RemoteSigned -scope CurrentUser'"
    break
}

# Change security protocol to support TLS 1.2 / 1.1 / 1.0 - old powershell uses TLS 1.0 as a default protocol
[Net.ServicePointManager]::SecurityProtocol = "tls12, tls11, tls"

Write-Output "Installing dvm..."

# Create dvm install directory
Write-Output "Creating $DvmInstallDir directory"
New-Item -ErrorAction Ignore -Path $DvmInstallDir -ItemType "directory"
if (!(Test-Path $DvmInstallDir -PathType Container)) {
    throw "Could not create $DvmInstallDir"
}

# Get the list of releases from GitHub
Write-Output "Getting the latest dvm release"
$releases = Invoke-RestMethod -Headers $githubHeader -Uri "https://api.github.com/repos/${GitHubOrg}/${GitHubRepo}/releases" -Method Get
if ($releases.Count -eq 0) {
    throw "No releases found in github.com/axetroy/dvm repo"
}

# Filter windows binary and download archive
$windowsAsset = $releases[0].assets | where-object { $_.name -Like "*windows_amd64.zip" }
if (!$windowsAsset) {
    throw "Cannot find the windows dvm archive"
}

$zipFilePath = $DvmInstallDir + "\" + $windowsAsset.name
Write-Output "Downloading $zipFilePath ..."

$githubHeader.Accept = "application/octet-stream"
Invoke-WebRequest -Headers $githubHeader -Uri $windowsAsset.url -OutFile $zipFilePath
if (!(Test-Path $zipFilePath -PathType Leaf)) {
    throw "Failed to download dvm - $zipFilePath"
}

# Extract dvm to ${DvmInstallDir}
Write-Output "Extracting $zipFilePath..."
Expand-Archive -Force -Path $zipFilePath -DestinationPath $DvmInstallDir
if (!(Test-Path $MicroCliPath -PathType Leaf)) {
    throw "Failed to download dvm archive - $zipFilePath"
}

# Check the dvm version
Invoke-Expression "$MicroCliPath --version"

# Clean up zipfile
Write-Output "Cleaning up $zipFilePath..."
Remove-Item $zipFilePath -Force

# Add DvmInstallDir directory to User Path environment variable
Write-Output "Attempting to add $DvmInstallDir to User Path Environment variable..."
$UserPathEnvionmentVar = [Environment]::GetEnvironmentVariable("PATH", "User")
if($UserPathEnvionmentVar -like '*dvm*') {
    Write-Output "Skipping to add $DvmInstallDir to User Path - $UserPathEnvionmentVar"
} else {
    [System.Environment]::SetEnvironmentVariable("PATH", $UserPathEnvionmentVar + ";$DvmInstallDir", "User")
    $UserPathEnvionmentVar = [Environment]::GetEnvironmentVariable("PATH", "User")
    Write-Output "Added $DvmInstallDir to User Path - $UserPathEnvionmentVar"
}

Write-Output "`r`ndvm has been installed successfully."

